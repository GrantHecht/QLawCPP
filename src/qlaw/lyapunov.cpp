// "Optimal" Lyapunov control function created with MATLAB's ccode function
// Modifications to the generated code have been made to avoid singularities
// Coded by Donald Ellison
// March 5th 2014

#include "qlaw.h"

void lyapunov(double u[], double & sma, double & e, double & inc, double & ape, double & ran, double & tru, double & f, options * probdata)
{
	static double t109;
	static double t110;
	static double t2;
	static double t3;
	static double t4;
	static double t5;
	static double t6;
	static double t7;
	static double t8;
	static double t9;
	static double t10;
	static double t11;
	static double t13;
	static double t14;
	static double t15;
	static double t12;
	static double t17;
	static double t18;
	static double t19;
	static double t24;
	static double t25;
	static double t26;
	static double t27;
	static double t28;
	static double t16;
	static double t20;
	static double t32;
	static double t21;
	static double t22;
	static double t23;
	static double t29;
	static double t30;
	static double t31;
	static double t33;
	static double t36;
	static double t34;
	static double t35;
	static double t37;
	static double t38;
	static double t39;
	static double t40;
	static double t41;
	static double t46;
	static double t42;
	static double t43;
	static double t44;
	static double t45;
	static double t47;
	static double t48;
	static double t49;
	static double t50;
	static double t51;
	static double t53;
	static double t52;
	static double t54;
	static double t55;
	static double t56;
	static double t57;
	static double t58;
	static double t65;
	static double t59;
	static double t60;
	static double t61;
	static double t62;
	static double t66;
	static double t63;
	static double t64;
	static double t67;
	static double t68;
	static double t69;
	static double t70;
	static double t71;
	static double t72;
	static double t73;
	static double t74;
	static double t75;
	static double t78;
	static double t76;
	static double t77;
	static double t79;
	static double t114;
	static double t80;
	static double t81;
	static double t82;
	static double t83;
	static double t84;
	static double t85;
	static double t86;
	static double t87;
	static double t88;
	static double t89;
	static double t90;
	static double t91;
	static double t92;
	static double t93;
	static double t94;
	static double t95;
	static double t100;
	static double t101;
	static double t96;
	static double t97;
	static double t98;
	static double t99;
	static double t102;
	static double t103;
	static double t104;
	static double t105;
	static double t106;
	static double t107;
	static double t108;
	static double t111;
	static double t112;
	static double t113;
	static double t115;
	static double t116;
	static double t117;
	static double t118;
	static double t119;
	static double t120;
	static double t121;
	static double t125;
	static double t122;
	static double t123;
	static double t124;
	static double t126;
	static double t127;
	static double t128;
	static double t129;
	static double t130;
	static double t163;
	static double t131;
	static double t132;
	static double t133;
	static double t134;
	static double t135;
	static double t136;
	static double t202;
	static double t137;
	static double t138;
	static double t139;
	static double t140;
	static double t141;
	static double t142;
	static double t143;
	static double t144;
	static double t145;
	static double t146;
	static double t147;
	static double t148;
	static double t149;
	static double t150;
	static double t151;
	static double t152;
	static double t153;
	static double t154;
	static double t155;
	static double t156;
	static double t157;
	static double t158;
	static double t159;
	static double t160;
	static double t161;
	static double t162;
	static double t164;
	static double t165;
	static double t166;
	static double t167;
	static double t168;
	static double t169;
	static double t170;
	static double t171;
	static double t172;
	static double t173;
	static double t174;
	static double t175;
	static double t176;
	static double t177;
	static double t178;
	static double t179;
	static double t180;
	static double t181;
	static double t182;
	static double t183;
	static double t184;
	static double t185;
	static double t186;
	static double t187;
	static double t188;
	static double t189;
	static double t190;
	static double t191;
	static double t192;
	static double t193;
	static double t194;
	static double t195;
	static double t196;
	static double t197;
	static double t198;
	static double t199;
	static double t200;
	static double t207;
	static double t201;
	static double t203;
	static double t204;
	static double t208;
	static double t205;
	static double t206;
	static double t209;


	//t109 = ape - probdata->ape_t;
	if (fmod(ape, 2.0*probdata->APPLE_PI) > fmod(probdata->ape_t, 2.0*probdata->APPLE_PI))
		t109 = fmod(ape - probdata->ape_t, 2.0*probdata->APPLE_PI) >  1.0e-6 ? fmod(ape - probdata->ape_t, 2.0*probdata->APPLE_PI) : 1.0e-6;
	else
		t109 = fmod(ape - probdata->ape_t, 2.0*probdata->APPLE_PI) < -1.0e-6 ? fmod(ape - probdata->ape_t, 2.0*probdata->APPLE_PI) : -1.0e-6;


	t110 = cos(t109);
	t2 = acos(t110);
	t3 = e*e;
	t4 = t3 - 1.0;
	t5 = 1.0 / (e*e*e);
	t6 = 1.0 / (e*e*e*e*e*e);
	t7 = t4*t4;
	t8 = t6*t7*(1.0 / 4.0);
	t9 = t8 + 1.0 / 2.7E1;
	t10 = sqrt(t9);
	t11 = 1.0 / e;
	t13 = t4*t5*(1.0 / 2.0);
	t14 = t10 + t13;
	t15 = pow(t14, 1.0 / 3.0);
	t12 = t11 + t15 - pow(t10 - t4*t5*(1.0 / 2.0), 1.0 / 3.0);
	t17 = t10 - t13;
	t18 = pow(t17, 1.0 / 3.0);
	t19 = t11 + t15 - t18;
	t24 = sma*t4;
	t25 = e*t19;
	t26 = t25 - 1.0;
	t27 = 1.0 / t26;
	t28 = sma*t4*t27;
	t16 = t24 - t28;
	t20 = cos(ape);
	t32 = probdata->mu*sma*t4;
	t21 = 1.0 / sqrt(-t32);
	t22 = probdata->b_petro + 1.0;
	t23 = t19*t19;
	t29 = t16*t16;
	t30 = sma*sma;
	t31 = t7*t23*t30;
	t33 = t23 - 1.0;
	t36 = t29*t33;
	t34 = t31 - t36;
	t35 = sqrt(t34);
	t37 = 1.0 / (e*e);
	t38 = 1.0 / sqrt(t9);
	t39 = 1.0 / (e*e*e*e*e);
	t40 = t4*t39;
	t41 = 1.0 / (e*e*e*e*e*e*e);
	t46 = t7*t41*(3.0 / 2.0);
	t42 = t40 - t46;
	t43 = t38*t42*(1.0 / 2.0);
	t44 = 1.0 / (e*e*e*e);


	//t45 = 1.0 / pow(t14, 2.0 / 3.0);
	t45 = t14 < 1.0e-10 ? 1.0e20 : 1.0 / pow(t14, 2.0 / 3.0);

	t47 = t4*t44*(3.0 / 2.0);
	t48 = 1.0 / pow(t17, 2.0 / 3.0);
	t49 = -t37 + t43 + t47;
	t50 = t48*t49*(1.0 / 3.0);
	t51 = t37 + t43 - t47;
	t53 = t45*t51*(1.0 / 3.0);
	t52 = t37 + t50 - t53;
	t54 = cos(inc);
	t55 = fabs(t54);
	t56 = sin(inc);
	t57 = 1.0 / t56;
	t58 = t20*t20;
	t65 = t3*t58;
	t59 = -t65 + 1.0;
	t60 = sqrt(t59);
	t61 = sin(ape);
	t62 = fabs(t61);
	t66 = e*t62;
	t63 = t60 - t66;
	t64 = 1.0 / t63;
	t67 = 1.0 / pow(-t32, 3.0 / 2.0);
	t68 = 1.0 / (f*f);
	t69 = sma - probdata->sma_t;
	t70 = 1.0 / sma;
	t71 = e - probdata->e_t;
	t72 = 1.0 / t4;
	t73 = inc - probdata->inc_t;
	t74 = fabs(t20);
	t75 = t61*t61;
	t78 = t3*t75;
	t76 = -t78 + 1.0;
	t77 = 1.0 / (t4*t4);
	t79 = sqrt(t76);
	t114 = e*t74;
	t80 = t79 - t114;
	t81 = t73*t73;
	t82 = 1.0 / (sma*sma*sma);
	t83 = t69*t69;
	t84 = e - 1.0;
	t85 = e + 1.0;
	t86 = fabs(t69);
	t87 = fabs(probdata->m_petro);
	t88 = 1.0 / t87;
	t89 = fabs(probdata->sma_t);
	t90 = 1.0 / t89;
	t91 = t86*t88*t90;
	t92 = pow(t91, probdata->n_petro);
	t93 = t92 + 1.0;
	t94 = 1.0 / probdata->r_petro;
	t95 = pow(t93, t94);

	//double t100 = ran-probdata->ran_t;
	if (fmod(ran, 2.0*probdata->APPLE_PI) > fmod(probdata->ran_t, 2.0*probdata->APPLE_PI))
		t100 = fmod(ran - probdata->ran_t, 2.0*probdata->APPLE_PI) >  1.0e-6 ? fmod(ran - probdata->ran_t, 2.0*probdata->APPLE_PI) :  1.0e-6;
	else
		t100 = fmod(ran - probdata->ran_t, 2.0*probdata->APPLE_PI) < -1.0e-6 ? fmod(ran - probdata->ran_t, 2.0*probdata->APPLE_PI) : -1.0e-6;

	t101 = cos(t100);
	t96 = acos(t101);
	t97 = 1.0 / sqrt(t59);
	t98 = e*t58*t97;
	t99 = t62 + t98;
	t102 = t96*t96;
	t103 = t56*t56;
	t104 = 1.0 / probdata->rpermin;
	t105 = sma*t84*t104;
	t106 = t105 + 1.0;
	t107 = probdata->k_petro*t106;
	t108 = exp(t107);
	t111 = t2*t2;
	t112 = t22*t22;
	t113 = t71*t71;
	t115 = t80*t80;
	t116 = t63*t63;
	t117 = 1.0 / t85;
	t118 = sin(tru);
	t119 = probdata->Wp*t108;
	t120 = t119 + 1.0;
	t121 = f*t11*t21*t35;
	t125 = probdata->b_petro*f*sma*t4*t21*t55*t57*t64;
	t122 = t121 - t125;
	t123 = 1.0 / sqrt(t34);
	t124 = 1.0 / (sma*sma);
	t126 = 1.0 / (t122*t122);
	t127 = probdata->We*probdata->mu*t68*t70*t72*t113*(1.0 / 4.0);
	t128 = probdata->Winc*probdata->mu*t68*t70*t72*t81*t115;
	t129 = probdata->Wran*probdata->mu*t68*t70*t72*t102*t103*t116;
	t130 = probdata->Wsma*probdata->mu*t68*t82*t83*t84*t95*t117*(1.0 / 4.0);
	t163 = probdata->Wape*t111*t112*t126;
	t131 = t127 + t128 + t129 + t130 - t163;
	t132 = 1.0 / sqrt(t76);
	t133 = 1.0 / (t63*t63);
	t134 = 1.0 / (t122*t122*t122);

	//double t135 = (t61 / fabs(t61));
	t135 = t61 > 0.0 ? 1.0:-1.0;

	t136 = e*t20*t135;
	t202 = t3*t20*t61*t97;
	t137 = t136 - t202;
	t138 = f*t21*t35*t37;
	t139 = t19*t29*t52*2.0;
	t140 = e*sma*2.0;
	t141 = 1.0 / (t26*t26);
	t142 = t11 + t15 - t18 - e*t52;
	t143 = sma*t4*t141*t142;
	t144 = t140 + t143 - e*sma*t27*2.0;
	t145 = e*t4*t23*t30*4.0;
	t146 = t139 + t145 - t16*t33*t144*2.0 - t7*t19*t30*t52*2.0;
	t147 = probdata->b_petro*e*f*sma*t21*t55*t57*t64*2.0;
	t148 = probdata->b_petro*f*sma*t4*t21*t55*t57*t99*t133;
	t149 = probdata->b_petro*e*f*probdata->mu*t4*t30*t55*t57*t64*t67;
	t150 = t138 + t147 + t148 + t149 - f*probdata->mu*sma*t35*t67 - f*t11*t21*t123*t146*(1.0 / 2.0);
	t151 = e*2.0;
	t152 = probdata->e_t*2.0;
	t153 = t151 - t152;
	t154 = probdata->We*e*probdata->mu*t68*t70*t77*t113*(1.0 / 2.0);
	t155 = e*t75*t132;
	t156 = t74 + t155;
	t157 = probdata->Winc*probdata->mu*t68*t70*t72*t80*t81*t156*2.0;
	t158 = probdata->Winc*e*probdata->mu*t68*t70*t77*t81*t115*2.0;
	t159 = 1.0 / (t85*t85);
	t160 = probdata->Wsma*probdata->mu*t68*t82*t83*t84*t95*t159*(1.0 / 4.0);
	t161 = probdata->Wran*probdata->mu*t63*t68*t70*t72*t99*t102*t103*2.0;
	t162 = probdata->Wran*e*probdata->mu*t68*t70*t77*t102*t103*t116*2.0;
	t164 = cos(tru);
	t165 = e*t164;
	t166 = t165 + 1.0;
	t167 = 1.0 / t166;
	t168 = sma*t7*t23*2.0;
	t169 = t4*t27;
	t170 = -t3 + t169 + 1.0;
	t171 = t16*t33*t170*2.0;
	t172 = t168 + t171;
	t173 = f*t11*t21*t123*t172*(1.0 / 2.0);
	t174 = f*probdata->mu*t4*t11*t35*t67*(1.0 / 2.0);
	t175 = t173 + t174 - probdata->b_petro*f*t4*t21*t55*t57*t64 - probdata->b_petro*f*probdata->mu*sma*t7*t55*t57*t64*t67*(1.0 / 2.0);
	t176 = probdata->We*probdata->mu*t68*t72*t113*t124*(1.0 / 4.0);
	t177 = probdata->Winc*probdata->mu*t68*t72*t81*t115*t124;
	t178 = probdata->Wran*probdata->mu*t68*t72*t102*t103*t116*t124;
	t179 = sma*2.0;
	t180 = probdata->sma_t*2.0;
	t181 = t179 - t180;
	t182 = 1.0 / (sma*sma*sma*sma);
	t183 = probdata->Wsma*probdata->mu*t68*t83*t84*t95*t117*t182*(3.0 / 4.0);

	//double t184 = (t69 / fabs(t69));
	t184 = t69 > 0.0 ? 1.0 : -1.0;

	t185 = t94 - 1.0;
	t186 = pow(t93, t185);
	t187 = probdata->n_petro - 1.0;
	t188 = pow(t91, t187);
	t189 = t176 + t177 + t178 + t183 - probdata->Wape*t111*t112*t134*t175*2.0 - probdata->Wsma*probdata->mu*t68*t82*t84*t95*t117*t181*(1.0 / 4.0) - probdata->Wsma*probdata->mu*probdata->n_petro*t68*t82*t83*t84*t88*t90*t94*t117*t184*t186*t188*(1.0 / 4.0);
	t190 = t120*t189;
	t191 = t190 - probdata->Wp*probdata->k_petro*t84*t104*t108*t131;
	t192 = sma*t4*t167;
	t193 = t24 + t192;
	t194 = sin(t109);
	t195 = t110*t110;
	t196 = -t195 + 1.0 > 1e-6 ? -t195 + 1.0:1e-7;
	t197 = 1.0 / sqrt(t196);
	t198 = probdata->Wape*t2*t112*t126*t194*t197*2.0;

	//double t199 = (t20 / fabs(t20));
	t199 = t20 > 0.0 ? 1.0 : -1.0;

	t200 = e*t61*t199;
	t207 = t3*t20*t61*t132;
	t201 = t200 - t207;
	t203 = probdata->Wran*probdata->mu*t63*t68*t70*t72*t102*t103*t137*2.0;
	t204 = probdata->Wape*probdata->b_petro*f*sma*t4*t21*t55*t57*t111*t112*t133*t134*t137*2.0;
	t208 = probdata->Winc*probdata->mu*t68*t70*t72*t80*t81*t201*2.0;
	t205 = t198 + t203 + t204 - t208;
	t206 = ape + tru;
	t209 = sin(t206);

	u[0] = sma*t4*t21*t118*(t120*(t154 + t157 + t158 + t160 + t161 + t162 + probdata->Wape*t111*t112*t150*1.0 / pow(f*t11*t21*sqrt(t31 - t29*(t12*t12 - 1.0)) - probdata->b_petro*f*sma*t4*t21*t55*t57*t64, 3.0)*2.0 - probdata->We*probdata->mu*t68*t70*t72*t153*(1.0 / 4.0) - probdata->Wsma*probdata->mu*t68*t82*t83*t95*t117*(1.0 / 4.0)) - probdata->Wp*probdata->k_petro*sma*t104*t108*t131) - e*t21*t30*t118*t191*2.0 - sma*t4*t11*t21*t120*t164*t205;
	u[1] = t21*(t120*(t154 + t157 + t158 + t160 + t161 + t162 + probdata->Wape*t111*t112*t134*t150*2.0 - probdata->We*probdata->mu*t68*t70*t72*t153*(1.0 / 4.0) - probdata->Wsma*probdata->mu*t68*t82*t83*t95*t117*(1.0 / 4.0)) - probdata->Wp*probdata->k_petro*sma*t104*t108*t131)*(t164*t193 + e*sma*t4*t167) - t21*t30*t166*t191*2.0 + t11*t21*t118*t120*t193*t205;
	u[2] = -sma*t4*t21*t120*t167*cos(t206)*(probdata->Wape*t111*t112*t134*(probdata->b_petro*f*sma*t4*t21*t64*((t54 / fabs(t54))) + probdata->b_petro*f*sma*t4*t21*t54*t55*1.0 / (t56*t56)*t64)*2.0 + probdata->Winc*probdata->mu*t68*t70*t72*t115*(inc*2.0 - probdata->inc_t*2.0) + probdata->Wran*probdata->mu*t54*t56*t68*t70*t72*t102*t116*2.0) - sma*t4*t21*t54*t57*t120*t167*t205*t209 - probdata->Wran*probdata->mu*t21*t56*t68*t96*t116*t120*t167*t209*sin(t100)*1.0 / sqrt(-t101*t101 + 1.0)*2.0;

	//Check for NaN's.....you probably want to end the simulation at this point
	if (u[0] != u[0] || u[1] != u[1] || u[2] != u[2])
	{
		std::cout << "BLOW UP in the control law!!" << std::endl;

		throw 13;
	}
		
}